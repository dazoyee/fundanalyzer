server:
  servlet:
    context-path: /fundanalyzer

spring:
  profiles:
    # dev | prod
    active: dev
  application:
    name: @pom.artifactId@

  sleuth:
    enabled: true
    sampler:
      probability: 1.0
  zipkin:
    enabled: true
    base-url: http://localhost:9411
    service:
      name: ${spring.application.name}
    sender:
      type: web

logging:
  level:
    org.seasar.doma:
      jdbc:
        UtilLoggingJdbcLogger: WARN

management:
  info:
    git:
      enabled: true
      mode: full
    env.enabled: true
    build.enabled: true
    java.enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /actuator
  endpoint:
    health:
      show-details: always

  health:
    diskspace.enabled: false
    circuitbreakers.enabled: true

  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 400ms
    tags:
      application: ${spring.application.name}

resilience4j:
  circuitbreaker.instances:
    edinet:
      registerHealthIndicator: true
      failureRateThreshold: 100                           # OPENへの閾値
      permittedNumberOfCallsInHalfOpenState: 1            # HALF_OPENの時に許可する呼び出し回数
      slidingWindowType: COUNT_BASED                      # COUNT_BASED | TIME_BASED
      slidingWindowSize: 20                               # OPENするかを計算する母数
      minimumNumberOfCalls: 20                            # 最低エラー回数
      waitDurationInOpenState: 300s                       # OPENからHALF_OPENに移行するまでの時間
      automaticTransitionFromOpenToHalfOpenEnabled: false # 自動でHALF_OPENにするか
      recordFailurePredicate: github.com.ioridazo.fundanalyzer.client.edinet.EdinetClient.RecordFailurePredicate
    nikkei:
      registerHealthIndicator: true
      failureRateThreshold: 100                           # OPENへの閾値
      permittedNumberOfCallsInHalfOpenState: 1            # HALF_OPENの時に許可する呼び出し回数
      slidingWindowType: COUNT_BASED                      # COUNT_BASED | TIME_BASED
      slidingWindowSize: 10                               # OPENするかを計算する母数
      minimumNumberOfCalls: 10                            # 最低エラー回数
      waitDurationInOpenState: 300s                       # OPENからHALF_OPENに移行するまでの時間
      automaticTransitionFromOpenToHalfOpenEnabled: false # 自動でHALF_OPENにするか
      recordFailurePredicate: github.com.ioridazo.fundanalyzer.client.jsoup.JsoupClient.RecordFailurePredicate
    kabuoji3:
      registerHealthIndicator: true
      failureRateThreshold: 100                           # OPENへの閾値
      permittedNumberOfCallsInHalfOpenState: 1            # HALF_OPENの時に許可する呼び出し回数
      slidingWindowType: COUNT_BASED                      # COUNT_BASED | TIME_BASED
      slidingWindowSize: 10                               # OPENするかを計算する母数
      minimumNumberOfCalls: 10                            # 最低エラー回数
      waitDurationInOpenState: 200h                       # OPENからHALF_OPENに移行するまでの時間
      automaticTransitionFromOpenToHalfOpenEnabled: false # 自動でHALF_OPENにするか
      recordFailurePredicate: github.com.ioridazo.fundanalyzer.client.jsoup.JsoupClient.RecordFailurePredicate
    minkabu:
      registerHealthIndicator: true
      failureRateThreshold: 100                           # OPENへの閾値
      permittedNumberOfCallsInHalfOpenState: 1            # HALF_OPENの時に許可する呼び出し回数
      slidingWindowType: COUNT_BASED                      # COUNT_BASED | TIME_BASED
      slidingWindowSize: 10                               # OPENするかを計算する母数
      minimumNumberOfCalls: 10                            # 最低エラー回数
      waitDurationInOpenState: 300s                       # OPENからHALF_OPENに移行するまでの時間
      automaticTransitionFromOpenToHalfOpenEnabled: false # 自動でHALF_OPENにするか
      recordFailurePredicate: github.com.ioridazo.fundanalyzer.client.jsoup.JsoupClient.RecordFailurePredicate
    yahoo-finance:
      registerHealthIndicator: true
      failureRateThreshold: 100                           # OPENへの閾値
      permittedNumberOfCallsInHalfOpenState: 1            # HALF_OPENの時に許可する呼び出し回数
      slidingWindowType: COUNT_BASED                      # COUNT_BASED | TIME_BASED
      slidingWindowSize: 10                               # OPENするかを計算する母数
      minimumNumberOfCalls: 10                            # 最低エラー回数
      waitDurationInOpenState: 300s                       # OPENからHALF_OPENに移行するまでの時間
      automaticTransitionFromOpenToHalfOpenEnabled: false # 自動でHALF_OPENにするか
      recordFailurePredicate: github.com.ioridazo.fundanalyzer.client.jsoup.JsoupClient.RecordFailurePredicate

  ratelimiter.instances:
    edinet:
      registerHealthIndicator: true
      limitRefreshPeriod: 1s          # 計測する期間
      limitForPeriod: 20              # 指定した期間の間に呼び出し可能な回数
      timeoutDuration: 10s            # スレッドが待機するデフォルトの時間
    nikkei:
      registerHealthIndicator: true
      limitRefreshPeriod: 1s          # 計測する期間
      limitForPeriod: 10              # 指定した期間の間に呼び出し可能な回数
      timeoutDuration: 10s            # スレッドが待機するデフォルトの時間
    kabuoji3:
      registerHealthIndicator: true
      limitRefreshPeriod: 1s          # 計測する期間
      limitForPeriod: 10              # 指定した期間の間に呼び出し可能な回数
      timeoutDuration: 10s            # スレッドが待機するデフォルトの時間
    minkabu:
      registerHealthIndicator: true
      limitRefreshPeriod: 1s          # 計測する期間
      limitForPeriod: 15              # 指定した期間の間に呼び出し可能な回数
      timeoutDuration: 10s            # スレッドが待機するデフォルトの時間
    yahoo-finance:
      registerHealthIndicator: true
      limitRefreshPeriod: 5s          # 計測する期間
      limitForPeriod: 7               # 指定した期間の間に呼び出し可能な回数
      timeoutDuration: 10s            # スレッドが待機するデフォルトの時間

app:
  version: @pom.version@

  config:
    rest-client:
      edinet:
        base-uri: https://disclosure.edinet-fsa.go.jp
        connect-timeout: 5s
        read-timeout: 60s
        max-attempts: 3
        back-off: 10s
      selenium:
        base-uri: http://localhost:9001
        connect-timeout: 5s
        read-timeout: 120s
        max-attempts: 3
        back-off: 60s
      slack:
        base-uri: https://hooks.slack.com
        connect-timeout: 5s
        read-timeout: 30s
        max-attempts: 3
        back-off: 5s
      jsoup:
        connect-timeout: 5s
        read-timeout: 15s
        max-attempts: 2
        back-off: 20s
      nikkei:
        base-uri: https://www.nikkei.com
      kabuoji3:
        base-uri: https://kabuoji3.com
      minkabu:
        base-uri: https://minkabu.jp
      yahoo-finance:
        base-uri: https://finance.yahoo.co.jp

    executor:
      core-pool-size: 50
      queue-capacity: 50
      max-pool-size: 500

    view:
      document-type-code: 120,130  # 分析表示処理対象
      discount-rate: 120  # 以上を表示
      outlier-of-standard-deviation: 10000  # 除外する標準偏差の外れ値
      coefficient-of-variation: 0.5  # 以下を表示
      diff-forecast-stock: 100  # 株価予想と最新株価との差が100以上を表示
      corporate.size: 300  # 日間を表示
      edinet-list.size: 400  # 日間を表示

    scraping:
      document-type-code: 120,130,140,150  # スクレイピング処理対象
      no-industry: # 処理対象外
        銀行業
        ,保険業
        ,内国法人・組合（有価証券報告書等の提出義務者以外）
        ,外国法人・組合
        ,外国法人・組合（有価証券報告書等の提出義務者以外）
        ,外国政府等
        ,個人（組合発行者を除く）
        ,個人（非居住者）（組合発行者を除く）
        ,その他（仮登録用）
      no-company: E31748,E03729
      # 日本郵政株式会社,信金中央金庫

    stock:
      nikkei.enabled: true
      kabuoji3.enabled: false
      minkabu.enabled: true
      yahoo-finance.enabled: true
      average-stock-price-for-last-days: 30  # 株価平均値の期間
      store-stock-price-for-last-days: 1000  # 株価の保存期間

    remove-document:
      document-type-code: 140,150
      company: E03815,E03041,E01737,E34537,E33624,E01542,E33625,E03724,E02611,E05080,E00334,E00678,E01124,E00816,E05047,E00840,E05156,E02274,E00939,E34177,E27486,E05199,E00991,E05599,E01317,E05523
      # マネックスグループ株式会社,株式会社クレディセゾン,株式会社日立製作所,ポート株式会社,プレミアグループ株式会社,株式会社荏原製作所
      # アルヒ株式会社,Ｊトラスト株式会社,日本ユニシス株式会社,楽天グループ株式会社,日本ハム株式会社,ユニ・チャーム株式会社,ＨＯＹＡ株式会社
      # 協和キリン株式会社,株式会社リログループ,三井化学株式会社,株式会社デジタルガレージ,キヤノン株式会社,エーザイ株式会社, 株式会社GAtechnologies
      # ペプチドリーム株式会社,株式会社ＣＬホールディングス,ライオン株式会社,株式会社アドウェイズ,株式会社ＬＩＸＩＬ,ＩＮＥＳＴ株式会社

  settings:
    file:
      path:
        company:
          company: C:/${spring.application.name}/company
          zip: C:/${spring.application.name}/company/zip
        edinet: C:/${spring.application.name}/edinet
        decode: C:/${spring.application.name}/decode

  scheduler:
    hour:
      company: 1  # 時に処理実施
      stock: 5,6,7,12,13,14,15,16,17,18,19,20,21,22,23,0  # 時に処理実施
      analysis: 2  # 時に処理実施
      update-view: 4  # 時に処理実施
      recover-document-period: 3  # 時に処理実施
      evaluate: 3  # 時に処理実施

    stock.target-company.number: 500  # 件の会社に対して処理実施
    analysis.past-days: 30  # 日間に遡って処理実施
    recover-document-period.past-days: 30  # 日間に遡って処理実施

  slack:
    analysis-result.enabled: true
    update-view.enabled: false
    insert-stock.enabled: false
    delete-stock.enabled: false
    evaluate.enabled: true
